/**
 * OrderCloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Sdk', 'model/ListSpec', 'model/ListSpecOption', 'model/ListSpecProductAssignment', 'model/Spec', 'model/SpecOption', 'model/SpecProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../Sdk'), require('../model/ListSpec'), require('../model/ListSpecOption'), require('../model/ListSpecProductAssignment'), require('../model/Spec'), require('../model/SpecOption'), require('../model/SpecProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.Specs = factory(root.OrderCloud.Sdk, root.OrderCloud.ListSpec, root.OrderCloud.ListSpecOption, root.OrderCloud.ListSpecProductAssignment, root.OrderCloud.Spec, root.OrderCloud.SpecOption, root.OrderCloud.SpecProductAssignment);
  }
}(this, function(Sdk, ListSpec, ListSpecOption, ListSpecProductAssignment, Spec, SpecOption, SpecProductAssignment) {
  'use strict';

  /**
   * Spec service.
   * @module api/Specs
   */

  /**
   * Constructs a new Specs. 
   * @alias module:api/Specs
   * @class
   * @param {module:Sdk} sdk Optional API client implementation to use,
   * default to {@link module:Sdk#instance} if unspecified.
   */
  var exports = function(sdk) {
    this.sdk = sdk || Sdk.instance;



    /**
     * @param {module:model/Spec} spec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Spec}
     */
    this.Create = function(spec, accessToken ) {
      var postBody = spec;

      // verify the required parameter 'spec' is set
      if (spec == undefined || spec == null) {
        throw new Error("Missing the required parameter 'spec' when calling Create");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.sdk.callApi(
        '/specs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/SpecOption} specOption 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecOption}
     */
    this.CreateOption = function(specID, specOption, accessToken ) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling CreateOption");
      }

      // verify the required parameter 'specOption' is set
      if (specOption == undefined || specOption == null) {
        throw new Error("Missing the required parameter 'specOption' when calling CreateOption");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.sdk.callApi(
        '/specs/{specID}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.Delete = function(specID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling Delete");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/specs/{specID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.DeleteOption = function(specID, optionID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling DeleteOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling DeleteOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/specs/{specID}/options/{optionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {String} productID ID of the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.DeleteProductAssignment = function(specID, productID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling DeleteProductAssignment");
      }

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw new Error("Missing the required parameter 'productID' when calling DeleteProductAssignment");
      }


      var pathParams = {
        'specID': specID,
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/specs/{specID}/productassignments/{productID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Spec}
     */
    this.Get = function(specID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling Get");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.sdk.callApi(
        '/specs/{specID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecOption}
     */
    this.GetOption = function(specID, optionID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling GetOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling GetOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.sdk.callApi(
        '/specs/{specID}/options/{optionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSpec}
     */
    this.List = function(opts, accessToken ) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpec;

      return this.sdk.callApi(
        '/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSpecOption}
     */
    this.ListOptions = function(specID, opts, accessToken ) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling ListOptions");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpecOption;

      return this.sdk.callApi(
        '/specs/{specID}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSpecProductAssignment}
     */
    this.ListProductAssignments = function(opts, accessToken ) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListSpecProductAssignment;

      return this.sdk.callApi(
        '/specs/productassignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} partialSpec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Spec}
     */
    this.Patch = function(specID, partialSpec, accessToken ) {
      var postBody = partialSpec;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling Patch");
      }

      // verify the required parameter 'partialSpec' is set
      if (partialSpec == undefined || partialSpec == null) {
        throw new Error("Missing the required parameter 'partialSpec' when calling Patch");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.sdk.callApi(
        '/specs/{specID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} partialSpecOption 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecOption}
     */
    this.PatchOption = function(specID, optionID, partialSpecOption, accessToken ) {
      var postBody = partialSpecOption;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling PatchOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling PatchOption");
      }

      // verify the required parameter 'partialSpecOption' is set
      if (partialSpecOption == undefined || partialSpecOption == null) {
        throw new Error("Missing the required parameter 'partialSpecOption' when calling PatchOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.sdk.callApi(
        '/specs/{specID}/options/{optionID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Spec}
     */
    this.Save = function(specID, spec, accessToken ) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling Save");
      }

      // verify the required parameter 'spec' is set
      if (spec == undefined || spec == null) {
        throw new Error("Missing the required parameter 'spec' when calling Save");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.sdk.callApi(
        '/specs/{specID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} specOption 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecOption}
     */
    this.SaveOption = function(specID, optionID, specOption, accessToken ) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID == undefined || specID == null) {
        throw new Error("Missing the required parameter 'specID' when calling SaveOption");
      }

      // verify the required parameter 'optionID' is set
      if (optionID == undefined || optionID == null) {
        throw new Error("Missing the required parameter 'optionID' when calling SaveOption");
      }

      // verify the required parameter 'specOption' is set
      if (specOption == undefined || specOption == null) {
        throw new Error("Missing the required parameter 'specOption' when calling SaveOption");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.sdk.callApi(
        '/specs/{specID}/options/{optionID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {module:model/SpecProductAssignment} specProductAssignment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.SaveProductAssignment = function(specProductAssignment, accessToken ) {
      var postBody = specProductAssignment;

      // verify the required parameter 'specProductAssignment' is set
      if (specProductAssignment == undefined || specProductAssignment == null) {
        throw new Error("Missing the required parameter 'specProductAssignment' when calling SaveProductAssignment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/specs/productassignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }
  };

  return exports;
}));
