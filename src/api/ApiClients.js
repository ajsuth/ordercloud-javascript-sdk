/**
 * OrderCloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Sdk', 'model/ApiClient', 'model/ApiClientAssignment', 'model/ListApiClient', 'model/ListApiClientAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../Sdk'), require('../model/ApiClient'), require('../model/ApiClientAssignment'), require('../model/ListApiClient'), require('../model/ListApiClientAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.ApiClients = factory(root.OrderCloud.Sdk, root.OrderCloud.ApiClient, root.OrderCloud.ApiClientAssignment, root.OrderCloud.ListApiClient, root.OrderCloud.ListApiClientAssignment);
  }
}(this, function(Sdk, ApiClient, ApiClientAssignment, ListApiClient, ListApiClientAssignment) {
  'use strict';

  /**
   * ApiClient service.
   * @module api/ApiClients
   */

  /**
   * Constructs a new ApiClients. 
   * @alias module:api/ApiClients
   * @class
   * @param {module:Sdk} sdk Optional API client implementation to use,
   * default to {@link module:Sdk#instance} if unspecified.
   */
  var exports = function(sdk) {
    this.sdk = sdk || Sdk.instance;



    /**
     * @param {module:model/ApiClient} apiClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiClient}
     */
    this.Create = function(apiClient, accessToken ) {
      var postBody = apiClient;

      // verify the required parameter 'apiClient' is set
      if (apiClient == undefined || apiClient == null) {
        throw new Error("Missing the required parameter 'apiClient' when calling Create");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ApiClient;

      return this.sdk.callApi(
        '/apiclients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.Delete = function(apiClientID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling Delete");
      }


      var pathParams = {
        'apiClientID': apiClientID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/apiclients/{apiClientID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @param {String} buyerID ID of the buyer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.DeleteBuyerAssignment = function(apiClientID, buyerID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling DeleteBuyerAssignment");
      }

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw new Error("Missing the required parameter 'buyerID' when calling DeleteBuyerAssignment");
      }


      var pathParams = {
        'apiClientID': apiClientID,
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/buyers/{buyerID}/ApiClients/Assignments/{apiClientID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @param {String} supplierID ID of the supplier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.DeleteSupplierAssignment = function(apiClientID, supplierID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling DeleteSupplierAssignment");
      }

      // verify the required parameter 'supplierID' is set
      if (supplierID == undefined || supplierID == null) {
        throw new Error("Missing the required parameter 'supplierID' when calling DeleteSupplierAssignment");
      }


      var pathParams = {
        'apiClientID': apiClientID,
        'supplierID': supplierID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/suppliers/{supplierID}/ApiClients/Assignments/{apiClientID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiClient}
     */
    this.Get = function(apiClientID, accessToken ) {
      var postBody = null;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling Get");
      }


      var pathParams = {
        'apiClientID': apiClientID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ApiClient;

      return this.sdk.callApi(
        '/apiclients/{apiClientID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object.<String, {String: String}>} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListApiClient}
     */
    this.List = function(opts, accessToken ) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListApiClient;

      return this.sdk.callApi(
        '/apiclients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiClientID ID of the api client.
     * @param {String} opts.buyerID ID of the buyer.
     * @param {String} opts.supplierID ID of the supplier.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListApiClientAssignment}
     */
    this.ListAssignments = function(opts, accessToken ) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'apiClientID': opts['apiClientID'],
        'buyerID': opts['buyerID'],
        'supplierID': opts['supplierID'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListApiClientAssignment;

      return this.sdk.callApi(
        '/apiclients/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @param {module:model/ApiClient} partialApiClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiClient}
     */
    this.Patch = function(apiClientID, partialApiClient, accessToken ) {
      var postBody = partialApiClient;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling Patch");
      }

      // verify the required parameter 'partialApiClient' is set
      if (partialApiClient == undefined || partialApiClient == null) {
        throw new Error("Missing the required parameter 'partialApiClient' when calling Patch");
      }


      var pathParams = {
        'apiClientID': apiClientID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ApiClient;

      return this.sdk.callApi(
        '/apiclients/{apiClientID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {String} apiClientID ID of the api client.
     * @param {module:model/ApiClient} apiClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiClient}
     */
    this.Save = function(apiClientID, apiClient, accessToken ) {
      var postBody = apiClient;

      // verify the required parameter 'apiClientID' is set
      if (apiClientID == undefined || apiClientID == null) {
        throw new Error("Missing the required parameter 'apiClientID' when calling Save");
      }

      // verify the required parameter 'apiClient' is set
      if (apiClient == undefined || apiClient == null) {
        throw new Error("Missing the required parameter 'apiClient' when calling Save");
      }


      var pathParams = {
        'apiClientID': apiClientID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ApiClient;

      return this.sdk.callApi(
        '/apiclients/{apiClientID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }


    /**
     * @param {module:model/ApiClientAssignment} apiClientAssignment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.SaveAssignment = function(apiClientAssignment, accessToken ) {
      var postBody = apiClientAssignment;

      // verify the required parameter 'apiClientAssignment' is set
      if (apiClientAssignment == undefined || apiClientAssignment == null) {
        throw new Error("Missing the required parameter 'apiClientAssignment' when calling SaveAssignment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var contentTypes = ['application/json', 'text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.sdk.callApi(
        '/apiclients/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, accessToken
      );
    }
  };

  return exports;
}));
